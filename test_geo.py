"""test for the geo module"""

import floodsystem.geo
import floodsystem.station
import floodsystem.stationdata


def test_stations_by_distance():
    """Test stations by distance function"""

    stations = floodsystem.stationdata.build_station_list()
    sorted_list = floodsystem.geo.stations_by_distance(stations, (0, 0))

    # check tuple entries are of expected types
    for n in sorted_list:
        assert type(n[1]) == float
        assert type(n[0]) == floodsystem.station.MonitoringStation
    # check it is ordered correctly
    for n in range(len(sorted_list) - 1):
        assert sorted_list[n][1] <= sorted_list[n + 1][1]


def test_stations_within_radius():
    """Test stations within radius function"""

    stations = floodsystem.stationdata.build_station_list()
    new_list = floodsystem.geo.stations_within_radius(stations, [52.2053, 0.1218], 10)

    for n in new_list:
        # check tuple entries are of expected types
        assert type(n[0]) == floodsystem.station.MonitoringStation
        assert type(n[1]) == float
        # check they are actually within radius
        assert n[1] <= 10


def test_rivers_with_station():
    """Test rivers with station function"""

    stations = floodsystem.stationdata.build_station_list()
    river_list = floodsystem.geo.rivers_with_station(stations)

    assert type(river_list) == list  # check a set is returned
    for n, river in enumerate(river_list):
        assert type(river) == str  # check it's full of strings
        if n > 0:
            assert river not in river_list[:n - 1]
        assert river not in river_list[n + 1:]


def test_stations_by_river():
    """Test stations by river function"""

    stations = floodsystem.stationdata.build_station_list()
    river_dict = floodsystem.geo.stations_by_river(stations)

    assert type(river_dict) == dict
    for n in river_dict:
        assert type(river_dict[n]) == list


def test_rivers_by_num_of_stations():
    """Test the rivers by number of stations function"""

    stations = floodsystem.stationdata.build_station_list()

    for N in range(5, 20):  # Systematically iterates through different lengths of river lists
        river_list_1 = floodsystem.geo.rivers_by_num_of_stations(stations, N)
        river_list_2 = floodsystem.geo.rivers_by_num_of_stations(stations, N + 1)

        # If the station count for the final river in a list generated with argument N is the same as
        # that of a list generated by argument N + 1 then the lists must be the same length as any river with the same
        # station count as the Nth river must be included

        if river_list_1[-1][1] == river_list_2[-1][1]:
            assert len(river_list_1) == len(river_list_2)

        # In the case that no extra terms have been added, the length of the list should be equal to N

        if river_list_1[-1][1] != river_list_2[-1][1]:
            assert len(river_list_1) == N

        # Checks descending order

        assert river_list_1[0][1] > river_list_1[-1][1]